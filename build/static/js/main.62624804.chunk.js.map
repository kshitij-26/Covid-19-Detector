{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","active","isRed","cases","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","setCasesType","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62624804.chunk.js","sourcesContent":["import React from \"react\";\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\nimport \"./InfoBox.css\"\n\nfunction InfoBox({title, active, isRed, cases, total, ...props}) {\n    return (\n        <div>\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && \"infoBox--red\"} `}>\n            <CardContent>\n            {/* title */}\n            <Typography className=\"infoBox__title\" color=\"textSecondary\">\n                {title}\n            </Typography>\n\n            {/* no. of cases */}\n            <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}> {cases}</h2>\n\n            {/* total */}\n            <Typography className = \"infoBox__total\" color=\"textSecondary\">\n             {total} Total\n            </Typography>\n\n            </CardContent>\n        </Card>\n            \n        </div>\n    )\n}\n\nexport default InfoBox\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier/5\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n\n","import React from 'react'\nimport './Table.css'\nimport numeral from \"numeral\";\n\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n        {\n            countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                </tr>\n\n            ))\n        } \n            \n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType=\"cases\") => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType, ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport InfoBox from './InfoBox'\nimport Map from './Map';\nimport Table from './Table'\nimport {sortData, prettyPrintStat} from \"./util\";\nimport LineGraph from './LineGraph'\nimport \"leaflet/dist/leaflet.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select, Card, CardContent\n} from \"@material-ui/core\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCountries, setMapCountries] = useState([]);\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n      const getCountriesData = async () =>{\n        await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) =>(\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n      };\n      getCountriesData();\n  },[]);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    setCountry(countryCode);\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n\n      //All of the data from country response\n      setCountryInfo(data);\n      setMapCenter(countryCode ===\"worldwide\" ? {lat: 34.80746, lng: -40.4796} :[data.countryInfo.lat,data.countryInfo.long]);\n      setMapZoom(countryCode === \"worldwide\" ? 3 : 4);\n\n    })\n\n  };\n\n  return (\n    <div className=\"app\">\n    <div className=\"app__left\">\n    <div className=\"app__header\">\n    <h1>COVID-19 TRACKER</h1>\n      <FormControl className=\"app__dropdown\">\n        <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n        {/* Loop through all the countries and show a drop down list of the options  */}\n        <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n        {\n          countries.map(country => {\n            return <MenuItem value={country.value}>{country.name}</MenuItem>\n          })\n        }\n\n          {/*<MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>*/}\n\n        </Select>\n\n      </FormControl>\n\n    </div>\n      \n    {/* Header */}\n    {/* Title + Select input dropdown field */}\n\n\n    <div className=\"app__stats\">\n          <InfoBox \n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")} \n            title=\"Coronavirus Cases\" \n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)}   \n\n            />\n          <InfoBox \n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")} \n            title=\"Recovered\" \n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)}  \n\n            />\n          <InfoBox \n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")} \n            title=\"Deaths\" \n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={prettyPrintStat(countryInfo.deaths)}  \n\n            />\n          \n           {/* InfoBoxes */}\n           {/* Infoboxes */}\n           {/* InfoBoxes */}\n\n    </div>\n\n   \n    {/* Map */}\n    <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n\n    </div>\n\n    <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData}/>\n          {/* Table */}\n\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n          {/* Graph */}\n\n\n\n        </CardContent>\n\n    \n    </Card>\n    \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}